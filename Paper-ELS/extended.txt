Processing is a programming language and environment designed to teach Computer
Science in a visual context.  Inspired by the Design by Numbers project,
Processing aims to make programming accessible to the Visual Arts community,
creating an educational environment where users are encouraged to share their
artistic works. As a result, a wide range of Processing examples are freely
available, making it easier for anyone with little or even no programming
knowledge to experiment with Processing.  Furthermore, Processing has been a
source of inspiration for several new projects. These include ProcessingJS, a
JavaScript implementation of Processing, or, more recently, P5, a JavaScript
library that takes Processing's design approach to the web. Processing has also
played an important role as an educational language, by being introduced in some
bachelor and master degrees, which has allowed architects and designers to use
programming in their design.

Despite the usefulness of Processing for designers, the same cannot be said for
architects, as they depend on traditional heavyweight CAD and BIM applications
(such as AutoCAD, Rhinoceros 3D, Revit, etc), which can be programmed, but using
different programming languages. For example, AutoCAD offers, among others, C++,
C#, AutoLisp, and VBA; Revit supports C++ and C#; and Rhinoceros 3D offers
RhinoScript, Python, and Grasshopper. Unfortunately, at the moment, no CAD or
BIM application allows users to write scripts in Processing. Therefore,
architects cannot take advantage of the Processing language nor of the huge
amount of Processing examples available for programming in their favourite CAD
and/or BIM application.

The work here presented joins Processing with the world of CAD/BIM applications,
creating a solution that allows architects to prototype new designs using
Processing and generate results in a CAD/BIM application. To achieve this, we
developed an implementation of Processing for the Rosetta programming
environment, allowing Processing scripts to generate 2D and 3D geometry in a
variety of CAD applications, such as AutoCAD, Rhinoceros3D, Sketchup, and Revit.

Our Processing implementation follows the traditional compiler pipeline
approach, composed by three separated phases, namely parsing, code analysis, and
code generation. First, syntax checks are made to Processing code.  Secondly, we
type-check the code and verify its semantic structure. Finally, the code is
translated to simplified Racket code. This enables the use of Rosetta and, at
the same time, DrRacket, a pedagogic development environment similar to
Processing's, therefor reducing the programmers transition effort.  DrRacket
offers programmers an editor with syntax-highlighting, syntax-checking, error
reporting, etc, but which we adapted to Processing.

Another interesting feature of our implementation is the ability of Processing
code to access Rosetta's libraries, particularly code that abstracts over CAD
applications, meaning that many of Processing's primitive operations can be
mapped directly to Rosetta's primitive operations.  Moreover, Processing scripts
can also use additional operations that do not exist in the traditional
Processing implementation, which are useful in the context of CAD-based models,
such as lofting and sweeping. Finally, as Rosetta offers several different
programming languages, Processing users can also combine their scripts with
scripts written in other languages, such as AutoLISP, Python, Racket, and
JavaScript.

As an example of Processing in a CAD application, the attached PDF shows a 2D
and a 3D example of Processing code running in AutoCAD. Both examples illustrate
a tree generated by a recursive procedure, that gradually reduces the length of
each tree branch. The 2D examples uses Processing's line() and ellipse()
primitive procedures for creating the tree branches and leaves, while the 3D
example illustrates the advantage that Rosetta brings to Processing, by using
the cone() primitive (used to create the tree branches), which is not present in
Processing.

These examples illustrate the potential that our Processing implementation
brings to both the architecture and the design communities. With little effort,
architects can run Processing scripts in a CAD/BIM application and use DrRacket
as their development environment. Moreover, by providing access to Rosetta, we
extend Processing with new capabilities that, in turn, improve the designer's
creative process. In the paper, we discuss additional features of our Processing
implementation and demonstrate the use of Processing in a complex architectonic
example.
